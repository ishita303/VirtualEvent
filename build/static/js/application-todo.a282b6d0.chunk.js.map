{"version":3,"sources":["containers/navs/Breadcrumb.js","components/common/CustomSelectInput.js","../node_modules/reactstrap/es/ButtonDropdown.js","components/applications/TodoListItem.js","containers/applications/AddNewTodoModal.js","components/common/ApplicationMenu.js","containers/applications/TodoApplicationMenu.js","views/app/applications/todo.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","x","className","map","key","active","to","BreadcrumbContainer","heading","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","propTypes","children","PropTypes","node","ButtonDropdown","React","createElement","Dropdown","_extends","group","memo","item","handleCheckChange","isSelected","xxs","Card","CardBody","location","status","title","category","createDate","Badge","color","labelColor","pill","label","CustomInput","type","checked","onChange","event","detail","i","initialState","connect","todoApp","labels","categories","addTodoItemAction","addTodoItem","modalOpen","toggleModal","useState","state","setState","Modal","isOpen","toggle","wrapClassName","backdrop","ModalHeader","IntlMessages","ModalBody","Label","defaultValue","target","value","components","classNamePrefix","name","options","val","defaultChecked","ModalFooter","Button","outline","onClick","newItem","addNetItem","ApplicationMenu","containerRef","useRef","setIsOpen","handleDocumentClick","e","container","current","contains","useEffect","forEach","document","addEventListener","removeEventListener","ref","NavLink","todoItems","allTodoItems","loading","getTodoListWithFilterAction","getTodoListWithFilter","addFilter","column","suppressScrollX","wheelPropagation","NavItem","classnames","c","l","getIndex","arr","prop","injectIntl","searchKeyword","orderColumn","orderColumns","selectedItems","getTodoListAction","getTodoList","getTodoListWithOrderAction","getTodoListWithOrder","getTodoListSearchAction","getTodoListSearch","selectedTodoItemsChangeAction","selectedTodoItemsChange","intl","setModalOpen","dropdownSplitOpen","setDropdownSplitOpen","displayOptionsIsOpen","setDisplayOptionsIsOpen","lastChecked","setLastChecked","body","classList","add","remove","selectedList","Object","assign","includes","push","shiftKey","items","start","end","slice","Math","min","max","Array","from","Set","handleChangeSelectAll","messages","Row","size","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Breadcrumb","Collapse","UncontrolledDropdown","o","placeholder","onKeyPress"],"mappings":"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","file":"static/js/application-todo.a282b6d0.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if('/'+sub===adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub, index) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/');\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  children: PropTypes.node\n};\n\nvar ButtonDropdown = function ButtonDropdown(props) {\n  return React.createElement(Dropdown, _extends({\n    group: true\n  }, props));\n};\n\nButtonDropdown.propTypes = propTypes;\nexport default ButtonDropdown;","import React from 'react';\nimport { Card, CardBody, Badge, CustomInput } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport { Colxx } from '../common/CustomBootstrap';\n\nconst newText = text => text.split('\\n').map(i => <p>{i}</p>);\n\nconst TodoListItem = ({ item, handleCheckChange, isSelected }) => {\n  return (\n    <Colxx xxs=\"12\">\n      <Card className=\"card d-flex mb-3\">\n        <div className=\"d-flex flex-grow-1 min-width-zero\">\n          <CardBody className=\"align-self-center d-flex flex-column flex-md-row justify-content-between min-width-zero align-items-md-center\">\n            <NavLink\n              to=\"#\"\n              location={{}}\n              id={`toggler${item.id}`}\n              className=\"list-item-heading mb-0 truncate w-40 w-xs-100  mb-1 mt-1\"\n            >\n              <i\n                className={`${\n                  item.status === 'COMPLETED'\n                    ? 'simple-icon-check heading-icon'\n                    : 'simple-icon-refresh heading-icon'\n                }`}\n              />\n              <span className=\"align-middle d-inline-block\">{item.title}</span>\n            </NavLink>\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\n              {item.category}\n            </p>\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\n              {item.createDate}\n            </p>\n            <div className=\"w-15 w-xs-100\">\n              <Badge color={item.labelColor} pill>\n                {item.label}\n              </Badge>\n            </div>\n          </CardBody>\n          <div className=\"custom-control custom-checkbox pl-1 align-self-center mr-4\">\n            <CustomInput\n              className=\"itemCheck mb-0\"\n              type=\"checkbox\"\n              id={`check_${item.id}`}\n              checked={isSelected}\n              onChange={(event) => handleCheckChange(event, item.id)}\n              label=\"\"\n            />\n          </div>\n        </div>\n        <div className=\"card-body pt-1\">\n          <p className=\"mb-0\">{newText(item.detail)}</p>\n        </div>\n      </Card>\n    </Colxx>\n  );\n};\n\nexport default React.memo(TodoListItem);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  CustomInput,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Label,\n} from 'reactstrap';\nimport Select from 'react-select';\nimport CustomSelectInput from '../../components/common/CustomSelectInput';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport { addTodoItem } from '../../redux/actions';\n\nconst initialState = {\n  title: '',\n  detail: '',\n  label: {},\n  category: {},\n  status: 'PENDING',\n};\n\nconst AddNewTodoModal = ({\n  modalOpen,\n  toggleModal,\n  labels,\n  categories,\n  addTodoItemAction,\n}) => {\n  const [state, setState] = useState(initialState);\n\n  const addNetItem = () => {\n    const newItem = {\n      title: state.title,\n      detail: state.detail,\n      label: state.label.value,\n      labelColor: state.label.color,\n      category: state.category.value,\n      status: state.status,\n    };\n    addTodoItemAction(newItem);\n    toggleModal();\n    setState(initialState);\n  };\n\n  return (\n    <Modal\n      isOpen={modalOpen}\n      toggle={toggleModal}\n      wrapClassName=\"modal-right\"\n      backdrop=\"static\"\n    >\n      <ModalHeader toggle={toggleModal}>\n        <IntlMessages id=\"todo.add-new-title\" />\n      </ModalHeader>\n      <ModalBody>\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.title\" />\n        </Label>\n        <Input\n          type=\"text\"\n          defaultValue={state.title}\n          onChange={(event) =>\n            setState({ ...state, title: event.target.value })\n          }\n        />\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.detail\" />\n        </Label>\n        <Input\n          type=\"textarea\"\n          defaultValue={state.detail}\n          onChange={(event) =>\n            setState({ ...state, detail: event.target.value })\n          }\n        />\n\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.category\" />\n        </Label>\n        <Select\n          components={{ Input: CustomSelectInput }}\n          className=\"react-select\"\n          classNamePrefix=\"react-select\"\n          name=\"form-field-name\"\n          options={categories.map((x, i) => {\n            return { label: x, value: x, key: i };\n          })}\n          value={state.category}\n          onChange={(val) => setState({ ...state, category: val })}\n        />\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.label\" />\n        </Label>\n        <Select\n          components={{ Input: CustomSelectInput }}\n          className=\"react-select\"\n          classNamePrefix=\"react-select\"\n          name=\"form-field-name\"\n          options={labels.map((x, i) => {\n            return {\n              label: x.label,\n              value: x.label,\n              key: i,\n              color: x.color,\n            };\n          })}\n          value={state.label}\n          onChange={(val) => setState({ ...state, label: val })}\n        />\n\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.status\" />\n        </Label>\n        <CustomInput\n          type=\"radio\"\n          id=\"exCustomRadio\"\n          name=\"customRadio\"\n          label=\"COMPLETED\"\n          checked={state.status === 'COMPLETED'}\n          onChange={(event) =>\n            setState({\n              ...state,\n              status: event.target.value === 'on' ? 'COMPLETED' : 'PENDING',\n            })\n          }\n        />\n        <CustomInput\n          type=\"radio\"\n          id=\"exCustomRadio2\"\n          name=\"customRadio2\"\n          label=\"PENDING\"\n          defaultChecked={state.status === 'PENDING'}\n          onChange={(event) =>\n            setState({\n              ...state,\n              status: event.target.value !== 'on' ? 'COMPLETED' : 'PENDING',\n            })\n          }\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" outline onClick={toggleModal}>\n          <IntlMessages id=\"todo.cancel\" />\n        </Button>\n        <Button color=\"primary\" onClick={() => addNetItem()}>\n          <IntlMessages id=\"todo.submit\" />\n        </Button>{' '}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const { labels, categories } = todoApp;\n  return {\n    labels,\n    categories,\n  };\n};\nexport default connect(mapStateToProps, {\n  addTodoItemAction: addTodoItem,\n})(AddNewTodoModal);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'reactstrap';\n\nconst ApplicationMenu = ({ children }) => {\n  const containerRef = useRef();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleDocumentClick = (e) => {\n    if (isOpen) {\n      const container = containerRef.current;\n      if (container.contains(e.target) || container === e.target) {\n        return;\n      }\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    ['click', 'touchstart'].forEach((event) =>\n      document.addEventListener(event, handleDocumentClick, false)\n    );\n\n    return () => {\n      ['click', 'touchstart'].forEach((event) =>\n        document.removeEventListener(event, handleDocumentClick, false)\n      );\n    };\n  }, [isOpen]);\n\n  return (\n    <div ref={containerRef} className={`app-menu ${isOpen ? 'shown' : ''}`}>\n      {children}\n      <NavLink\n        className=\"app-menu-button d-inline-block d-xl-none\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <i className=\"simple-icon-options\" />\n      </NavLink>\n    </div>\n  );\n};\n\nexport default ApplicationMenu;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { NavItem, Badge } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport classnames from 'classnames';\n\nimport IntlMessages from '../../helpers/IntlMessages';\nimport ApplicationMenu from '../../components/common/ApplicationMenu';\nimport { getTodoListWithFilter } from '../../redux/actions';\n\nconst TodoApplicationMenu = ({\n  todoItems,\n  filter,\n  allTodoItems,\n  loading,\n  labels,\n  categories,\n  getTodoListWithFilterAction,\n}) => {\n  const addFilter = (column, value) => {\n    getTodoListWithFilterAction(column, value);\n  };\n\n  return (\n    <ApplicationMenu>\n      <PerfectScrollbar\n        options={{ suppressScrollX: true, wheelPropagation: false }}\n      >\n        <div className=\"p-4\">\n          <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.status\" />\n          </p>\n          <ul className=\"list-unstyled mb-5\">\n            <NavItem className={classnames({ active: !filter })}>\n              <NavLink to=\"#\" onClick={() => addFilter('', '')} location={{}}>\n                <i className=\"simple-icon-reload\" />\n                <IntlMessages id=\"todo.all-tasks\" />\n                <span className=\"float-right\">\n                  {loading && allTodoItems.length}\n                </span>\n              </NavLink>\n            </NavItem>\n            <NavItem\n              className={classnames({\n                active:\n                  filter &&\n                  filter.column === 'status' &&\n                  filter.value === 'PENDING',\n              })}\n            >\n              <NavLink\n                location={{}}\n                to=\"#\"\n                onClick={() => addFilter('status', 'PENDING')}\n              >\n                <i className=\"simple-icon-refresh\" />\n                <IntlMessages id=\"todo.pending-tasks\" />\n                <span className=\"float-right\">\n                  {loading &&\n                    todoItems.filter((x) => x.status === 'PENDING').length}\n                </span>\n              </NavLink>\n            </NavItem>\n            <NavItem\n              className={classnames({\n                active:\n                  filter &&\n                  filter.column === 'status' &&\n                  filter.value === 'COMPLETED',\n              })}\n            >\n              <NavLink\n                to=\"#\"\n                location={{}}\n                onClick={() => addFilter('status', 'COMPLETED')}\n              >\n                <i className=\"simple-icon-check\" />\n                <IntlMessages id=\"todo.completed-tasks\" />\n                <span className=\"float-right\">\n                  {loading &&\n                    todoItems.filter((x) => x.status === 'COMPLETED').length}\n                </span>\n              </NavLink>\n            </NavItem>\n          </ul>\n          <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.categories\" />\n          </p>\n          <ul className=\"list-unstyled mb-5\">\n            {categories.map((c, index) => {\n              return (\n                <NavItem key={index}>\n                  <div onClick={() => addFilter('category', c)}>\n                    <div className=\"custom-control custom-radio\">\n                      <input\n                        type=\"radio\"\n                        className=\"custom-control-input\"\n                        defaultChecked={\n                          filter &&\n                          filter.column === 'category' &&\n                          filter.value === c\n                        }\n                      />\n                      <label className=\"custom-control-label\">{c}</label>\n                    </div>\n                  </div>\n                </NavItem>\n              );\n            })}\n          </ul>\n          <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.labels\" />\n          </p>\n          <div>\n            {labels.map((l, index) => {\n              return (\n                <p className=\"d-sm-inline-block mb-1\" key={index}>\n                  <NavLink\n                    to=\"#\"\n                    location={{}}\n                    onClick={() => addFilter('label', l.label)}\n                  >\n                    <Badge\n                      className=\"mb-1\"\n                      color={`${\n                        filter &&\n                        filter.column === 'label' &&\n                        filter.value === l.label\n                          ? l.color\n                          : `outline-${l.color}`\n                      }`}\n                      pill\n                    >\n                      {l.label}\n                    </Badge>\n                  </NavLink>\n                </p>\n              );\n            })}\n          </div>\n        </div>\n      </PerfectScrollbar>\n    </ApplicationMenu>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const {\n    todoItems,\n    filter,\n    allTodoItems,\n    loading,\n    labels,\n    categories,\n  } = todoApp;\n\n  return {\n    todoItems,\n    filter,\n    allTodoItems,\n    loading,\n    labels,\n    categories,\n  };\n};\nexport default connect(mapStateToProps, {\n  getTodoListWithFilterAction: getTodoListWithFilter,\n})(TodoApplicationMenu);\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Row,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownMenu,\n  Collapse,\n  ButtonDropdown,\n  CustomInput,\n} from 'reactstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\n\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\n\nimport {\n  getTodoList,\n  getTodoListWithOrder,\n  getTodoListSearch,\n  selectedTodoItemsChange,\n} from '../../../redux/actions';\nimport TodoListItem from '../../../components/applications/TodoListItem';\nimport AddNewTodoModal from '../../../containers/applications/AddNewTodoModal';\nimport TodoApplicationMenu from '../../../containers/applications/TodoApplicationMenu';\n\nconst getIndex = (value, arr, prop) => {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i][prop] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst TodoApp = ({\n  match,\n  intl,\n  todoItems,\n  searchKeyword,\n  loading,\n  orderColumn,\n  orderColumns,\n  selectedItems,\n  getTodoListAction,\n  getTodoListWithOrderAction,\n  getTodoListSearchAction,\n  selectedTodoItemsChangeAction,\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [dropdownSplitOpen, setDropdownSplitOpen] = useState(false);\n  const [displayOptionsIsOpen, setDisplayOptionsIsOpen] = useState(false);\n  const [lastChecked, setLastChecked] = useState(null);\n\n  useEffect(() => {\n    document.body.classList.add('right-menu');\n    getTodoListAction();\n\n    return () => {\n      document.body.classList.remove('right-menu');\n    };\n  }, [getTodoListAction]);\n\n  const handleCheckChange = (event, id) => {\n    if (lastChecked == null) {\n      setLastChecked(id);\n    }\n\n    let selectedList = Object.assign([], selectedItems);\n    if (selectedList.includes(id)) {\n      selectedList = selectedList.filter((x) => x !== id);\n    } else {\n      selectedList.push(id);\n    }\n    selectedTodoItemsChangeAction(selectedList);\n\n    if (event.shiftKey) {\n      let items = todoItems;\n      const start = getIndex(id, items, 'id');\n      const end = getIndex(lastChecked, items, 'id');\n      items = items.slice(Math.min(start, end), Math.max(start, end) + 1);\n      selectedList.push(\n        ...items.map((item) => {\n          return item.id;\n        })\n      );\n      selectedList = Array.from(new Set(selectedList));\n      selectedTodoItemsChangeAction(selectedList);\n    }\n  };\n\n  const handleChangeSelectAll = () => {\n    if (loading) {\n      if (selectedItems.length >= todoItems.length) {\n        selectedTodoItemsChangeAction([]);\n      } else {\n        selectedTodoItemsChangeAction(todoItems.map((x) => x.id));\n      }\n    }\n  };\n\n  const { messages } = intl;\n\n  return (\n    <>\n      <Row className=\"app-row survey-app\">\n        <Colxx xxs=\"12\">\n          <div className=\"mb-2\">\n            <h1>\n              <IntlMessages id=\"Agenda\" />\n            </h1>\n            {loading && (\n              <div className=\"text-zero top-right-button-container\">\n                <Button\n                  color=\"primary\"\n                  size=\"lg\"\n                  className=\"top-right-button\"\n                  onClick={() => setModalOpen(true)}\n                >\n                  <IntlMessages id=\"todo.add-new\" />\n                </Button>{' '}\n                <ButtonDropdown\n                  isOpen={dropdownSplitOpen}\n                  toggle={() => setDropdownSplitOpen(!dropdownSplitOpen)}\n                >\n                  <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\n                    <CustomInput\n                      className=\"custom-checkbox mb-0 d-inline-block\"\n                      type=\"checkbox\"\n                      id=\"checkAll\"\n                      checked={selectedItems.length >= todoItems.length}\n                      onClick={() => handleChangeSelectAll()}\n                      onChange={() => handleChangeSelectAll()}\n                      label={\n                        <span\n                          className={`custom-control-label ${\n                            selectedItems.length > 0 &&\n                            selectedItems.length < todoItems.length\n                              ? 'indeterminate'\n                              : ''\n                          }`}\n                        />\n                      }\n                    />\n                  </div>\n                  <DropdownToggle\n                    caret\n                    color=\"primary\"\n                    className=\"dropdown-toggle-split btn-lg\"\n                  />\n                  <DropdownMenu right>\n                    <DropdownItem>\n                      <IntlMessages id=\"todo.action\" />\n                    </DropdownItem>\n                    <DropdownItem>\n                      <IntlMessages id=\"todo.another-action\" />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </ButtonDropdown>\n              </div>\n            )}\n            <Breadcrumb match={match} />\n          </div>\n\n          <div className=\"mb-2\">\n            <Button\n              color=\"empty\"\n              className=\"pt-0 pl-0 d-inline-block d-md-none\"\n              onClick={() => setDisplayOptionsIsOpen(!displayOptionsIsOpen)}\n            >\n              <IntlMessages id=\"todo.display-options\" />{' '}\n              <i className=\"simple-icon-arrow-down align-middle\" />\n            </Button>\n            <Collapse\n              id=\"displayOptions\"\n              className=\"d-md-block\"\n              isOpen={displayOptionsIsOpen}\n            >\n              <div className=\"d-block mb-2 d-md-inline-block\">\n                <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\n                  <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\n                    <IntlMessages id=\"todo.orderby\" />\n                    {orderColumn ? orderColumn.label : ''}\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    {orderColumns.map((o, index) => {\n                      return (\n                        <DropdownItem\n                          key={index}\n                          onClick={() => getTodoListWithOrderAction(o.column)}\n                        >\n                          {o.label}\n                        </DropdownItem>\n                      );\n                    })}\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\n                  <input\n                    type=\"text\"\n                    name=\"keyword\"\n                    id=\"search\"\n                    placeholder={messages['menu.search']}\n                    defaultValue={searchKeyword}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        getTodoListSearchAction(e.target.value);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            </Collapse>\n          </div>\n          <Separator className=\"mb-5\" />\n          <Row>\n            {loading ? (\n              todoItems.map((item, index) => (\n                <TodoListItem\n                  key={`todo_item_${index}`}\n                  item={item}\n                  handleCheckChange={handleCheckChange}\n                  isSelected={loading ? selectedItems.includes(item.id) : false}\n                />\n              ))\n            ) : (\n              <div className=\"loading\" />\n            )}\n          </Row>\n        </Colxx>\n      </Row>\n      {loading && <TodoApplicationMenu />}\n      <AddNewTodoModal\n        toggleModal={() => setModalOpen(!modalOpen)}\n        modalOpen={modalOpen}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const {\n    todoItems,\n    searchKeyword,\n    loading,\n    orderColumn,\n    orderColumns,\n    selectedItems,\n  } = todoApp;\n  return {\n    todoItems,\n    searchKeyword,\n    loading,\n    orderColumn,\n    orderColumns,\n    selectedItems,\n  };\n};\nexport default injectIntl(\n  connect(mapStateToProps, {\n    getTodoListAction: getTodoList,\n    getTodoListWithOrderAction: getTodoListWithOrder,\n    getTodoListSearchAction: getTodoListSearch,\n    selectedTodoItemsChangeAction: selectedTodoItemsChange,\n  })(TodoApp)\n);\n"],"sourceRoot":""}