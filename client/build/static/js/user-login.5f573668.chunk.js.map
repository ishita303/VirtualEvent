{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","views/user/login.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","validatePassword","value","error","length","validateEmail","test","connect","authUser","loading","loginUserAction","loginUser","history","useState","email","password","useEffect","NotificationManager","warning","initialValues","xxs","md","to","id","onSubmit","values","errors","touched","name","validate","type","color","size"],"mappings":"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","file":"static/js/user-login.5f573668.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React, { useState, useEffect } from 'react';\nimport {Link } from \"react-router-dom\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nimport { loginUser } from '../../redux/actions';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst Login = ({ history, loading, error, loginUserAction }) => {\n  const [email] = useState('demo@gogo.com');\n  const [password] = useState('gogo123');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(error, 'Login Error', 3000, null, null, '');\n    }\n  }, [error]);\n\n  const onUserLogin = (values) => {\n    if (!loading) {\n      if (values.email !== '' && values.password !== '') {\n        loginUserAction(values, history);\n      }\n    }\n  };\n\n  const initialValues = { email, password };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">FICCI-CAPAM 2020</p>\n            <p className=\"white mb-0\">\n              Please use your credentials to login.\n              <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/user/register\" className=\"white\">\n                REGISTER\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.login-title\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      validate={validatePassword}\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/forgot-password\">\n                      <IntlMessages id=\"user.forgot-password-question\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error } = authUser;\n  return { loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  loginUserAction: loginUser,\n})(Login);\n"],"sourceRoot":""}